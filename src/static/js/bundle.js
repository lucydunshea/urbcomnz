/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./static/js/map.js":
/*!**************************!*\
  !*** ./static/js/map.js ***!
  \**************************/
/***/ (() => {

eval("// Set up the scene, camera, and renderer\r\nconst scene = new THREE.Scene();\r\nconst camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 0.1, 1000);\r\ncamera.position.z = 15;  // Distance from the globe\r\n\r\nconst renderer = new THREE.WebGLRenderer({ alpha: true });  // Transparent background\r\nrenderer.setSize(window.innerWidth, window.innerHeight);\r\nrenderer.setPixelRatio(window.devicePixelRatio);\r\ndocument.getElementById('globe-container').appendChild(renderer.domElement);\r\n\r\n// Globe geometry and texture (replace with your terrain data if available)\r\nconst globeRadius = 5;\r\nconst globeGeometry = new THREE.SphereGeometry(globeRadius, 64, 64);\r\nconst globeMaterial = new THREE.MeshPhongMaterial({\r\n    color: 0xffffff, // Set the globe color similar to the embossed look\r\n    flatShading: true\r\n});\r\nconst globe = new THREE.Mesh(globeGeometry, globeMaterial);\r\nscene.add(globe);\r\n\r\n// Light to create the embossed effect\r\nconst ambientLight = new THREE.AmbientLight(0x999999);\r\nscene.add(ambientLight);\r\n\r\nconst pointLight = new THREE.PointLight(0xffffff, 1);\r\npointLight.position.set(10, 10, 10);\r\nscene.add(pointLight);\r\n\r\n// Automatic rotation\r\nfunction animate() {\r\n    requestAnimationFrame(animate);\r\n    globe.rotation.y += 0.001;  // Adjust speed as needed\r\n    renderer.render(scene, camera);\r\n}\r\nanimate();\r\n\r\n// Function to add markers based on lat/lon\r\nfunction addMarkerToGlobe(lat, lon, name) {\r\n    const markerGeometry = new THREE.SphereGeometry(0.1, 16, 16);\r\n    const markerMaterial = new THREE.MeshBasicMaterial({ color: 0xff0000 });\r\n    const marker = new THREE.Mesh(markerGeometry, markerMaterial);\r\n\r\n    const phi = (90 - lat) * (Math.PI / 180);\r\n    const theta = (lon + 180) * (Math.PI / 180);\r\n\r\n    marker.position.set(\r\n        globeRadius * Math.sin(phi) * Math.cos(theta),\r\n        globeRadius * Math.cos(phi),\r\n        globeRadius * Math.sin(phi) * Math.sin(theta)\r\n    );\r\n\r\n    scene.add(marker);\r\n    marker.name = name;\r\n}\r\n\r\n// Fetch project data and add markers\r\nasync function loadProjectMarkers() {\r\n    try {\r\n        const response = await fetch('/api/project-locations/');\r\n        const projects = await response.json();\r\n\r\n        projects.forEach(project => {\r\n            addMarkerToGlobe(project.latitude, project.longitude, project.name);\r\n        });\r\n    } catch (error) {\r\n        console.error('Error fetching project locations:', error);\r\n    }\r\n}\r\n\r\nloadProjectMarkers();\r\n\r\n// Adjust canvas size on window resize\r\nwindow.addEventListener('resize', () => {\r\n    camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n});\r\n\n\n//# sourceURL=webpack://src/./static/js/map.js?");

/***/ }),

/***/ "./static/js/scripts.js":
/*!******************************!*\
  !*** ./static/js/scripts.js ***!
  \******************************/
/***/ (() => {

eval("// Function to handle scroll events\r\nwindow.onscroll = function() {\r\n    scrollFunction();\r\n};\r\n\r\nfunction scrollFunction() {\r\n    var navbar = document.querySelector(\".main-nav\");\r\n    var menuItems = document.querySelectorAll(\".main-nav__menu-item-link\");\r\n\r\n    if (document.body.scrollTop > 50 || document.documentElement.scrollTop > 50) {\r\n        navbar.classList.add(\"shrink\");\r\n        menuItems.forEach(function(item) {\r\n            item.setAttribute(\"tabindex\", \"-1\"); // Disable tab focus\r\n            item.style.pointerEvents = \"none\"; // Disable click events\r\n            item.style.opacity = \"0\"; // Hide the links visually\r\n            item.style.transition = \"opacity 0.5s\"; // Optional: add transition effect\r\n        });\r\n    } else {\r\n        navbar.classList.remove(\"shrink\");\r\n        menuItems.forEach(function(item) {\r\n            item.setAttribute(\"tabindex\", \"0\"); // Enable tab focus\r\n            item.style.pointerEvents = \"auto\"; // Enable click events\r\n            item.style.opacity = \"1\"; // Show the links\r\n        });\r\n    }\r\n}\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    const nav = document.querySelector(\".main-nav\");\r\n    const hamburgerMenu = document.getElementById(\"hamburger-menu\");\r\n    const sideDrawer = document.getElementById(\"side-drawer\");\r\n    const sideDrawerClose = document.getElementById(\"side-drawer-close\");\r\n\r\n    // Shrink nav on scroll and show hamburger menu\r\n    window.addEventListener(\"scroll\", function() {\r\n        if (window.scrollY > 50) {\r\n            nav.classList.add(\"shrink\");\r\n        } else {\r\n            nav.classList.remove(\"shrink\");\r\n        }\r\n    });\r\n\r\n    // Open side drawer on hamburger menu click\r\n    hamburgerMenu.addEventListener(\"click\", function() {\r\n        sideDrawer.classList.add(\"open\");\r\n    });\r\n\r\n    // Close side drawer on close button click\r\n    sideDrawerClose.addEventListener(\"click\", function() {\r\n        sideDrawer.classList.remove(\"open\");\r\n    });\r\n\r\n    // Close side drawer when clicking outside of it\r\n    sideDrawer.addEventListener(\"click\", function(event) {\r\n        if (!event.target.closest(\".side-drawer__menu\")) {\r\n            sideDrawer.classList.remove(\"open\");\r\n        }\r\n    });\r\n});\r\n\r\ndocument.addEventListener(\"DOMContentLoaded\", function() {\r\n    var videoContainer = document.querySelector('.video-container');\r\n    var mainContent = document.getElementById('main-content');\r\n\r\n    // Scroll to main content on scroll down arrow click\r\n    videoContainer.addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        mainContent.scrollIntoView({\r\n            behavior: 'smooth'\r\n        });\r\n    });\r\n\r\n    videoContainer.addEventListener('wheel', function(e) {\r\n        e.preventDefault();\r\n    });\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    let initialScrollPosition = 0;\r\n    let scrolled = false;\r\n\r\n    window.addEventListener('scroll', function() {\r\n        let currentScrollPosition = window.scrollY;\r\n\r\n        if (currentScrollPosition > initialScrollPosition && !scrolled) {\r\n            scrolled = true;\r\n            document.querySelector('#main-content').scrollIntoView({\r\n                behavior: 'smooth'\r\n            });\r\n        } else if (currentScrollPosition <= initialScrollPosition) {\r\n            scrolled = false;\r\n        }\r\n    });\r\n\r\n    // Scroll to section on scroll down arrow click\r\n    document.querySelector('.home__scroll-down-arrow a').addEventListener('click', function(e) {\r\n        e.preventDefault();\r\n        document.querySelector(this.getAttribute('href')).scrollIntoView({\r\n            behavior: 'smooth'\r\n        });\r\n    });\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    const navbar = document.querySelector('.main-nav');\r\n    \r\n    // Shrink navbar if not on the home page\r\n    if (!document.body.classList.contains('home-page')) {\r\n        navbar.classList.add('shrink');\r\n    } else {\r\n        navbar.classList.remove('shrink');\r\n    }\r\n    \r\n    // Reset navbar and reload page when clicking on the logo on the home page\r\n    document.querySelector('.main-nav__logo').addEventListener('click', function() {\r\n        if (document.body.classList.contains('home-page')) {\r\n            navbar.classList.remove('shrink');\r\n            location.reload(); // Reload the page\r\n        }\r\n    });\r\n});\r\n\r\n\r\n\n\n//# sourceURL=webpack://src/./static/js/scripts.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	__webpack_modules__["./static/js/scripts.js"]();
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./static/js/map.js"]();
/******/ 	
/******/ })()
;